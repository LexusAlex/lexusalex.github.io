---
layout: note.njk
tags: notes
number : 15
title: Настройка веб сервера Nginx
description: Как с нуля создать composer пакет и опубликовать его на packagist.org
date: 2021-02-19 23:00:00 +3
main_image: /assets/images/notes/14/main.png
gradient_image: /assets/images/notes/14/gradient.png
themes: php composer
---

1. [Сборка Nginx из исходников на Debian 10](https://lexusalex.ru/notes/2021-01-21-linux-debian-installing-nginx-from-source/)

В первой статье мы установили nginx из исходников.
Сегодня продолжим и разберемся с настройкой и как он работает.

После запуска nginx имеет один главный процесс и несколько рабочих процессов наследованных от главного процесса.
Каждый рабочий процесс способен обрабатывать тысячи http соединений.

Количество рабочих процессов прописываются в конфигурационном файле в моем случае он лежит там куда мы ставили nginx
`/home/alex/nginx/conf/nginx.conf`, в других дистрибутивах может быть по другому.

В конфигурационном файле, директивы могут быть простые:

```text
user  nobody;
```
И блочные:

```text
events {
    worker_connections  1024;
    multi_accept on;
}
```
Комментарий обозначается символом `#`.

## Рабочие процессы

Как говорилось выше рабочие процессы можно определять

```text
# по умолчанию 1 процесс, auto значит nginx определит количество рабочих процессов автоматически равным числу ядер процессора
worker_processes  auto;
```
Посмотрим на это:

```shell
ps -ef --forest | grep nginx
root        728      1  0 15:04 ?        00:00:00 nginx: master process /home/alex/nginx/sbin/nginx
nobody     1258    728  0 16:31 ?        00:00:00  \_ nginx: worker process
```

Сейчас у меня 1 рабочий процесс, что вполне закономерно, по кол-ву ядер на сервере.

```text
events {
    # Задаёт максимальное число соединений, которые одновременно может открыть рабочий процесс.
    # Как правило, число устанавливают в зависимости от числа ядер процессора по принципу n * 1024. Например, 2 ядра дадут worker_connections 2048
    worker_connections  1024; 
}
```

## Пользователь

По умолчанию рабочие процессы nginx работают от пользователя nobody.

Создадим для этих целей системного пользователя nginx

```shell
sudo useradd -M -r -s /usr/sbin/nologin nginx
```
И пропишем в конфигурационном файле

```text
user  nginx nginx;
```

Перезапускам сервер и проверяем

```shell
sudo ./sbin/nginx -s reload
```

## Http сервер

Основное предназначение nginx - это обработка http соединений, для настройки этого существует директива `http`

```text
http {

}
```

> Любой файл конфигурации можно подключать с помощью директивы include например include mime.types; с корректными директивами

Теперь нужно определить виртуальный хост делается это директивой `server`. Их может быть несколько.

Определяем на каких хостах и по какому порту нам принимать входящие соединения директива [listen](https://nginx.org/ru/docs/http/ngx_http_core_module.html#listen)
Так же определяем имя сервера.
```text
http {
    server {
        listen 8080;
        server_name  test;
        
        location / {
            root /data/www;
        }
    }
}
```

Следующим шагом необходимо определить директиву `location` которая задает конфигурацию в зависимости от URI запроса.

`root` задает корневой каталог для запросов

```text
http {
    server {
        listen 8081;
        server_name  test;
        location / {
            root html/test;
            index index.html;
        }
    }
}
```

https://sheensay.ru/nginx#v-chem-raznica-mezhdu-reload-i-restart
https://nginx.org/ru/docs/beginners_guide.html
https://nginx.org/ru/docs/http/ngx_http_core_module.html#server