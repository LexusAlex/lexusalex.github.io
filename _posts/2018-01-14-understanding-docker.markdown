---
layout: post
title:  Понимая Docker
date:   2018-01-14
author: Алексей Шмелев
categories: virtualization
tags:	docker
comments: true
cover:  "/assets/docker/docker.png"
---

# Эксперименты

Только недавно стал разбираться с этой технологией и потихоньку переводить на нее свои проекты, до этого пользовался Вагрантом.

Не думаю что нужно много рассказывать что такое Докер, в сети полно информации. 
Скажу только о том что Докер это утилита для запуска процесса в изолированном окружении.
Докер держит вашу систему в чистоте и порядке, так как не нужно ставить сотни зависимых пакетов, для запуска и разработки любого приложения нужен только Докер (ну или Вагрант:))

С помощью Докера можно быстро запустить уже созданное приложение или развернуть новое окружение.

Для экспериментов сначала нам понадобиться последняя версия php на данный момент, в связке с веб сервером apache
вот [здесь](https://hub.docker.com/_/php/) можно посмотреть официальные версии php. Недавно (4 января 2018) вышла версия PHP 7.21 давайте поставим ее выполнив в консоли команду docker pull

~~~bash
docker pull php:7.2.1-apache-stretch
~~~

![Загрузка образа в докер](https://lexusalex.github.io/assets/docker/docker-download-image.png "Загрузка образа в докер")

Все, образ загружен. Посмотрим на него командой docker images

~~~bash
docker images [OPTIONS] [REPOSITORY[:TAG]]
~~~

получим список образов которые есть в системе, в данном случае только один 7.2.1-apache-stretch

~~~bash
REPOSITORY          TAG                    IMAGE ID            CREATED             SIZE
php                 7.2.1-apache-stretch   f99d319c7004        4 days ago          377MB
~~~

посмотрим информацию об образе

~~~shell
docker inspect php:7.2.1-apache-stretch
docker info
docker rmi php:7.2.1-apache-stretch
~~~

Эти команды покажут разнообразую информацию о докере и образе. 
Команда docker rmi удаляет указанный образ по имени.

Теперь можно создать и запустить контейнер командой docker run, у которой очень много настроек. 
Запуск контейнера в интерактивном режиме с флагами -t -i, по окончании установки открыть консоль /bin/bash, и автоматически удалить контейнер как только он будет остановлен, то есть выйдем из контейнера.

~~~bash
docker run --name web --rm -i -t -p 80:80 php:7.2.1-apache-stretch /bin/bash
~~~
Теперь давай-те запустим контейнер в виде демона и пропишем директорию внутри контейнера

~~~bash
docker run --name web -p 80:80 -d -v "$PWD":/var/www/html php:7.2.1-apache-stretch
~~~

Посмотреть все контейнеры в системе, и подключиться к работающему контейнеру

~~~bash
docker ps -a
docker exec -i -t web /bin/bash
~~~

Остановим/Запустим контейнер 

~~~bash
docker stop web
docker start web
~~~

Веб сервер с поддержкой php это хорошо, но нам еще нужна и база данных. Скачаем образ нужной версии mysql пусть это будет 5.7

~~~bash
docker pull mysql:5.7
~~~
На том же [docker hub](https://hub.docker.com/) можно найти и посмотреть настройки официальных образов.

Чтобы связать нам два контейнера нужно удалить контейнер web и переписать команду, затем создать снова, тогда внутри контейнера web будет доступ к контейнеру db по стандартому порту 3306

~~~bash
    docker run --name db -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7
    
    docker run --name web --link db:mysql -p 80:80 -d -v "$PWD":/var/www/html php:7.2.1-apache-stretch
~~~
Ключи команды docker run:

--name - имя контейнера

-d - Выполняет контейнер в "отключённом режиме". Команда будет выполнять контейнер в фоновом режиме и вернёт идентификатор контейнера.

-t - вывести консоль

-e - переменные окружения для контейнера

-p - публикует порт контейнера на хость машину

---link - связь контейнера с другим

-v - монтирование директории из контейнера в хост машину

Теперь можно спокойно запускать и останавливать контейнеры.

В следующих заметках я расскажу что такое Dockerfile для создания своих образов на основе других.